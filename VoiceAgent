##some fun with voice commands

import speech_recognition as sr
import pyttsx3
import webbrowser

# Initialize the text-to-speech engine
engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen_for_command():
    # Initialize recognizer
    recognizer = sr.Recognizer()

    # Use the microphone as the source of input
    with sr.Microphone() as source:
        print("Listening for commands...")
        recognizer.adjust_for_ambient_noise(source)  # Adjust for ambient noise
        audio = recognizer.listen(source)  # Listen to the microphone

    try:
        print("Recognizing...")
        command = recognizer.recognize_google(audio)  # Use Google's recognition engine
        print(f"Command received: {command.lower()}")
        return command.lower()
    except sr.UnknownValueError:
        print("Sorry, I did not understand that.")
        speak("Sorry, I did not understand that. Can you repeat please?")
        return None
    except sr.RequestError:
        print("Could not request results; check your internet connection.")
        speak("There's some issue")
        return None

def execute_task(command):
    if command:
        if "open youtube" in command:
            # Example: "open website youtube"
            speak("opening youtube")
            webbrowser.open("https://www.youtube.com")  # Open YouTube, you can modify as needed
        elif "open whatsapp" in command:
            speak("Opening whatsapp")
            webbrowser.open("https://web.whatsapp.com")
        elif "open gmail" in command:
            speak("Opening gmail")
            webbrowser.open("https://mail.google.com/mail/u/0/#inbox")
        elif "goodbye" in command:
            speak("Goodbye, have a nice day!")
            exit()  # Close the programxit()  # Close the program https://mail.google.com/mail/u/0/#inbox
        else:
            speak("Command not recognized.")
    else:
        speak("I did not understand, please repeat the command.")

if __name__ == "__main__":
    while True:
        command = listen_for_command()
        execute_task(command)
